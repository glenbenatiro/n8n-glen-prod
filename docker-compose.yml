services:
  # --- 1. Reverse Proxy Service (Traefik) ---
  traefik:
    image: traefik:v3.5.2
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./traefik-data/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik-data/acme.json:/etc/traefik/acme.json
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--log.level=INFO"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${BASIC_AUTH_CREDENTIALS}"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # --- 2. Database Service (PostgreSQL) ---
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=${TZ}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # --- 3. Queue Service (Redis) ---
  redis:
    image: redis:8.2.0
    container_name: redis
    restart: unless-stopped
    networks:
      - internal
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # --- 4. n8n Main/Web Service (UI, API, Webhooks) ---
  n8n-web:
    image: n8nio/n8n:1.111.0
    container_name: n8n-web
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - web
      - internal
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=${TZ}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - N8N_EMAIL_MODE=smtp
      - NODE_ENV=production
      - WEBHOOK_URL=https://hooks.n8n.${DOMAIN_NAME}
      - N8N_EDITOR_BASE_URL=https://n8n.${DOMAIN_NAME}
      - N8N_HOST=n8n.${DOMAIN_NAME}
      - N8N_PROTOCOL=https
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=true
      - N8N_RUNNERS_ENABLED=true
    volumes:
      - n8n_data:/home/node/.n8n
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=n8n-stack_web"
      - "traefik.http.routers.n8n-editor.rule=Host(`n8n.${DOMAIN_NAME}`)"
      - "traefik.http.routers.n8n-editor.entrypoints=websecure"
      - "traefik.http.routers.n8n-editor.tls.certresolver=letsencrypt"
      - "traefik.http.routers.n8n-editor.service=n8n-service"
      - "traefik.http.routers.n8n-hooks.rule=Host(`hooks.n8n.${DOMAIN_NAME}`)"
      - "traefik.http.routers.n8n-hooks.entrypoints=websecure"
      - "traefik.http.routers.n8n-hooks.tls.certresolver=letsencrypt"
      - "traefik.http.routers.n8n-hooks.service=n8n-service"
      - "traefik.http.services.n8n-service.loadbalancer.server.port=5678"
      - "traefik.http.routers.n8n-editor.middlewares=sec-headers" # <-- CHANGED (Removed 'basic-auth')
      # - "traefik.http.middlewares.basic-auth.basicauth.users=${BASIC_AUTH_CREDENTIALS}" # <-- DELETED (This line is no longer needed)
      - "traefik.http.middlewares.sec-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.sec-headers.headers.sslRedirect=true"
      - "traefik.http.middlewares.sec-headers.headers.contentTypeNosniff=true"
      - "traefik.http.routers.n8n-hooks.middlewares=sec-headers"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # --- 5. n8n Worker Service (Executions) ---
  n8n-worker:
    image: n8nio/n8n:1.111.0
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internal
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=${TZ}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - N8N_EMAIL_MODE=smtp
      - NODE_ENV=production
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=true
      - N8N_RUNNERS_ENABLED=true
    command: worker
    volumes:
      - n8n_data:/home/node/.n8n
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

# --- Top-Level Networks and Volumes Definitions ---
networks:
  web:
    name: n8n-stack_web
  internal:
    name: n8n-stack_internal
    driver: bridge

volumes:
  postgres_data:
  n8n_data:
